                                            * les variable


 elle ce declare de plusieur façons a travers la syntaxe suivante var ,let,et const 'nom de la variable' = valeur 
 Exemple:
var a = "hurtel";
conts b = 20 ;
var c = true;
var notes= [12,13,15,] pour les tableaux
une varriable peut avoir plusieur type :entier,undefined,boolean,null

                               
                                     * les conditions


 - const age = 20;
if(age>18){ console.log( " majeur")} elle nous permetra d'afficher majeur si l'age est supperieur a 18
 on notes les differents signe de comparaison:
<,>,<=,>=,===,==

- const age =19
 -const pays ='fr'
  
 if ((pays==='fr' && age>=18)|| (pays=== usa && age >=16)){( console.log('vous aves le droit de conduire'))}
else {(" vous n'avez pas le droit de conduire")}
  
cette condition permet de verifier si l'une des conditions est vrai et affiche 'vous avez le droit de conduire'
si elle est fause elle affichera " vous n'avez pas le droit de conduire"

une autre maniere d'ecrire une condition

switch(pays){
casa'fr':
console.log("je suis en france")
break
case'usa':
console.log("je suis aux usa")
break
default :
('je ne suis dans aucun pays')
break 
}
 
                                      *fonctions


 les fontions des ensembles d'operation qui retournes des resultats elles peuvent prendre en parrametre des argument qui 
peuvent etres des varriables  et doit etres appélé pour s'executer.syntaxe d'une fonction:

FUNCTION nom de la fontion (argument1,argument2.....)

{corp de la fonction      {RETURN argument a retourner}  } appel de la fonction avec des parametre d'appel

Exemple:
 
function hurtel(age,pays)
{
if((pays==='fr' && age>=18)|| (pays=== usa && age >=16))

{return true}
{retunr false}    }

console.log(hurtel (18,'fr')) 

cette fonction permettra de verifier nos conditions et afficher "true" et "false" si les conditions son vrai et fause  


                                
                                          *les classes


les classes sont des syntaxes permetant d'atribuer des prototipes a des objets  dans le but d'avoir des types posonalisés
 en javascrip l'on utilisera la fontion constructor poure la mise en place de notre classe 
Exemple de creation d'une classe.

class student{
        ecole='jule ferry'
     constructor (prenom,nom){
        this.prenom=prenom
        this.nom=nom
    
     }
    }

     const john = new student( 'john','Doe')
     const jean = new student( 'jean','Doe')
     console.log(john,jean)

}
cette classe permet de creer une variable et s'attribuer des objets comme des eleves avec leur nom et prenom 



                                                  *les fonction usuelles


 -la methode 'cat' elle permet de recuperer un index positif ou negatif et donner la valeur  crrespondante a cet index

-la methode 'concat' permet de concatener les tableaux pour pourvoir les fusionner

-la methode 'fill' permet de remplire un tableau avec des valeurs precises

-la methode 'filter' permet de filtrer des nombre precis dans un tableau selon une condition precise

-la methode 'find' permet de recuperer la premiere valeur le la methode 'filter'

-la methode 'findindex' permet de nous renvoyer l'index de la methode'find'

-La méthode 'forEach' exécute une fois une fonction fournie pour chaque élément d'un tableau.

-La méthode 'from' permet de creer un tableau qui prend en compte deux parametres

-La méthode 'include verifier si un champ existe dans un tableau en renvoyant la valeur true or false'

-La méthode 'join' permet de joindre les elements d'un taleau avec ou pas un carractere de lieson

-La méthode 'map' crée un Nouveau tableau rempli avec les résultats de l’appel d’une fonction fournie sur 
chaque élément du tableau appelant. 

-La méthode 'push' ajoute un ou plusieurs éléments à la fin de et renvoie la nouvelle longueur du tableau.

-la methode 'reduce' premet de faire une sorte de somme des valeurs valeur d'un tableau

-la methode 'reverse'qui permet d'inverser les element d'un tableau



                                            *les timers


les timers sont des methodes permetant d'avoir le controle sur le temp ou et interval de temp d'execution des resultats
nous avons les methodes SET TIMEOUT ET SET INTERVALE
EXEMPLE:


console.log('bonjour')
    setTimeout(()=>{
        console.log('les gens')
    },1000)

Cette methode permet d'afficher BONJOUR et apres une seconde ecoulé elle affichera LES GENS


console.log('bonjour')
    setTintervale(()=>{
        console.log('les gens')
    },1000)

Cette methode permet d'afficher BONJOUR et apres une seconde ecoulé elle affichera LES GENS
en le repetant a chaque seconde qui s'ecoule

                                            *promise

les promise sont des fonction qui permetent de representer le coté asynchrones pour faciliter le travail.elle prend
en parametre deux fonction: RESOLVE lorque la promesse ete resolue et REJECT lorque la promesse n'a pa ete resolue

Exemple:

const p=new Promise((resolve, reject) => {
    resolve(4)
    console.log(p)

})
p.then((n)=> {
    console.log('NOMBRE', n)
})
.catch((e)=> {
    console.log('echec',e)
})

cette promesse affichera 'nombre 4' si l'on prend en parametre la methode resolve 'echec 4' si on prend en parametre
la methode reject


                                            
                                                      *Appel http







                                                      *les modules


les modules permetent de sauvegarder nos differents script dans un fichier externe qui par la suite pourra etres 
importer pour l'utiliser dans notre code 
  procedure:

-crer un fichier .js

-A l'interieur de ce fichier saisir nos differents fonction ou procedure en leurs donant un nom et en ajoutant la
objet export devant chaque objet que l'on souhaiterais exporter et les sauvegarder

-En suite lorsque l'on voudra faire appel a ces derniers ,il faudra se placer dans notre zone de code de  notre editeur
de texte

-Puis ajouter un type module a notre balise ouvrante script <script type='module'>

-En suite saisir IMPROT {"nom de objet sauvegarder"} FROM ' chemin d'acces du fichier de sauvegarde'

-en suite l'on peut utiliser notre objet
 
il est a noter que  l'on veut importer un meme objet plusieur fois pour different usage dans ce cas il seras question pour
nous de le renomer a chaque import pour eviter de creer un conflis 
-pour cela on uliseras la syntaxe :

 IMPROT {"nom de objet sauvegardeé" AS"nouveau nom de l'objet sauvegardé "} FROM ' chemin d'acces du fichier de sauvegarde'
  
si l'on veut tout impoter les objets de notre fichier on utilisera la syntaxe:

 IMPROT * FROM ' chemin d'acces du fichier de sauvegarde'


